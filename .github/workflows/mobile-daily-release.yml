name: "Daily release (photos independent)"
on:
    workflow_dispatch: # Allow manually running the action
    schedule:
        # Run daily at 04:00 UTC
        - cron: '0 4 * * *'
        # Run daily at 00:00 UTC
        - cron: '0 16 * * *'
env:
    FLUTTER_VERSION: "3.32.8"
permissions:
    contents: write
jobs:
    sync-fork:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout fork
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.APP_TOKEN }}
                  fetch-depth: 0

            - name: Sync fork with upstream
              run: |
                  # Configure git
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  
                  # Add upstream remote
                  git remote add upstream https://github.com/ente-io/ente.git
                  
                  # Fetch upstream changes
                  git fetch upstream
                  
                  # Merge upstream changes into main branch
                  git checkout main
                  git merge upstream/main --allow-unrelated-histories
                  
                  # Push the updated fork
                  git push origin main

    build:
        runs-on: ubuntu-latest
        needs: sync-fork
        defaults:
            run:
                working-directory: mobile/apps/photos
        steps:
            - name: Checkout code and submodules
              uses: actions/checkout@v4
              with:
                  submodules: recursive
            
            - name: Setup JDK 17
              uses: actions/setup-java@v1
              with:
                  java-version: 17
            
            - name: Install Flutter ${{ env.FLUTTER_VERSION  }}
              uses: subosito/flutter-action@v2
              with:
                  channel: "stable"
                  flutter-version: ${{ env.FLUTTER_VERSION  }}
                  cache: true

            - name: Increment version code for build
              run: |
                  CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
                  VERSION_NAME=$(echo $CURRENT_VERSION | cut -d'+' -f1)
                  CURRENT_BUILD=$(echo $CURRENT_VERSION | cut -d'+' -f2)
                  NEW_BUILD=$((CURRENT_BUILD + ${{ github.run_number }}))
                  NEW_VERSION="${VERSION_NAME}+${NEW_BUILD}"

                  sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
                  echo "Building with version ${NEW_VERSION}"
                  
                  # Store version for later use
                  echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
                  echo "NEW_VERSION_TAG=photos-v${{ env.NEW_VERSION }}" >> $GITHUB_ENV
            
            - name: Setup keys
              uses: timheuer/base64-to-file@v1
              with:
                  fileName: "keystore/ente_photos_key.jks"
                  encodedString: ${{ secrets.SIGNING_KEY_PHOTOS }}
            
            - name: Build independent APK
              run: |
                flutter build apk --dart-define=cronetHttpNoPlay=true --release --flavor independent
                mv build/app/outputs/flutter-apk/app-independent-release.apk build/app/outputs/flutter-apk/ente-${{ env.NEW_VERSION_TAG }}.apk
              env:
                  SIGNING_KEY_PATH: "/home/runner/work/_temp/keystore/ente_photos_key.jks"
                  SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS_PHOTOS }}
                  SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD_PHOTOS }}
                  SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD_PHOTOS }}
            
            - name: Checksum
              run: sha256sum build/app/outputs/flutter-apk/ente-${{ env.NEW_VERSION_TAG }}.apk > build/app/outputs/flutter-apk/sha256sum
            
            - name: Create a GitHub release
              uses: ncipollo/release-action@v1
              with:
                  artifacts: "mobile/apps/photos/build/app/outputs/flutter-apk/ente-${{ env.NEW_VERSION_TAG }}.apk,mobile/apps/photos/build/app/outputs/flutter-apk/sha256sum"
                  tag: ${{ env.NEW_VERSION_TAG }}
                  name: "${{ env.NEW_VERSION_TAG }}"
                  draft: false
                  generateReleaseNotes: true

    cleanup-old-releases:
        runs-on: ubuntu-latest
        needs: build
        if: success()
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Delete old releases
              uses: actions/github-script@v7
              with:
                  script: |
                      const { data: releases } = await github.rest.repos.listReleases({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          per_page: 100
                      });
                      
                      // Filter releases that match our pattern (photos-v*)
                      const photosReleases = releases.filter(release => 
                          release.tag_name.startsWith('photos-v')
                      ).sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                      
                      // Keep only the 10 most recent releases, delete the rest
                      const releasesToDelete = photosReleases.slice(10);
                      
                      for (const release of releasesToDelete) {
                          console.log(`Deleting release: ${release.tag_name}`);
                          try {
                              // Delete the release
                              await github.rest.repos.deleteRelease({
                                  owner: context.repo.owner,
                                  repo: context.repo.repo,
                                  release_id: release.id
                              });
                              
                              // Delete the associated tag
                              await github.rest.git.deleteRef({
                                  owner: context.repo.owner,
                                  repo: context.repo.repo,
                                  ref: `tags/${release.tag_name}`
                              });
                              
                              console.log(`Successfully deleted release and tag: ${release.tag_name}`);
                          } catch (error) {
                              console.log(`Failed to delete ${release.tag_name}: ${error.message}`);
                          }
                      }
